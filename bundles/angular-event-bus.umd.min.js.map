{"version":3,"sources":["ng://angular-event-bus/lib/angular-event-bus.service.ts","ng://angular-event-bus/lib/angular-event-bus.component.ts","ng://angular-event-bus/lib/angular-event-bus.module.ts"],"names":["AngularEventBusService","this","channels","prototype","subscribe","topic","observer","Subject","publish","data","subject","next","destroy","complete","Injectable","args","providedIn","AngularEventBusComponent","ngOnInit","Component","selector","template","AngularEventBusModule","NgModule","declarations","imports","exports"],"mappings":"2TAAA,IAAAA,EAAA,WAGA,SAAAA,IAKUC,KAAAC,SAA6C,UASrDF,EAAAG,UAAAC,UAAA,SAAUC,EAAeC,GAKvB,OAJKL,KAAKC,SAASG,KACjBJ,KAAKC,SAASG,GAAS,IAAIE,EAAAA,SAGtBN,KAAKC,SAASG,GAAOD,UAAUE,IAQxCN,EAAAG,UAAAK,QAAA,SAAQH,EAAeI,OACfC,EAAUT,KAAKC,SAASG,GACzBK,GAKLA,EAAQC,KAAKF,IAQfT,EAAAG,UAAAS,QAAA,SAAQP,OACAK,EAAUT,KAAKC,SAASG,GACzBK,IAILA,EAAQG,kBACDZ,KAAKC,SAASG,yBAjDxBS,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kHAJd,GCAA,IAAAC,EAAA,WAaE,SAAAA,KAKF,OAHEA,EAAAd,UAAAe,SAAA,iCAbDC,EAAAA,UAASJ,KAAA,CAAC,CACTK,SAAU,wBACVC,SAAU,oGAcZJ,EAlBA,GCAAK,EAAA,WAKA,SAAAA,KAMqC,2BANpCC,EAAAA,SAAQR,KAAA,CAAC,CACRS,aAAc,CAACP,GACfQ,QAAS,GAETC,QAAS,CAACT,OAEyBK,EAXrC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subscription, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularEventBusService {\n\n  private channels: { [key: string]: Subject<any>; } = {};\n\n  /**\n   * Subscribe to a topic and provide a single handler/observer.\n   * @param topic The name of the topic to subscribe to.\n   * @param observer The observer or callback function to listen when changes are published.\n   *\n   * @returns Subscription from which you can unsubscribe to release memory resources and to prevent memory leak.\n   */\n  subscribe(topic: string, observer: (_: any) => void): Subscription {\n    if (!this.channels[topic]) {\n      this.channels[topic] = new Subject<any>();\n    }\n\n    return this.channels[topic].subscribe(observer);\n  }\n\n  /**\n   * Publish some data to the subscribers of the given topic.\n   * @param topic The name of the topic to emit data to.\n   * @param data data in any format to pass on.\n   */\n  publish(topic: string, data: any): void {\n    const subject = this.channels[topic];\n    if (!subject) {\n      // Or you can create a new subject for future subscribers\n      return;\n    }\n\n    subject.next(data);\n  }\n\n  /**\n   * When you are sure that you are done with the topic and the subscribers no longer needs to listen to a particular topic, you can\n   * destroy the observable of the topic using this method.\n   * @param topic The name of the topic to destroy.\n   */\n  destroy(topic: string): null {\n    const subject = this.channels[topic];\n    if (!subject) {\n      return;\n    }\n\n    subject.complete();\n    delete this.channels[topic];\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-angular-event-bus',\n  template: `\n    <p>\n      angular-event-bus works!\n    </p>\n  `,\n  styles: []\n})\nexport class AngularEventBusComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularEventBusComponent } from './angular-event-bus.component';\n\n\n\n@NgModule({\n  declarations: [AngularEventBusComponent],\n  imports: [\n  ],\n  exports: [AngularEventBusComponent]\n})\nexport class AngularEventBusModule { }\n"]}