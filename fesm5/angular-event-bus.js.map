{"version":3,"file":"angular-event-bus.js","sources":["ng://angular-event-bus/lib/angular-event-bus.service.ts","ng://angular-event-bus/lib/angular-event-bus.component.ts","ng://angular-event-bus/lib/angular-event-bus.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subscription, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularEventBusService {\n\n  private channels: { [key: string]: Subject<any>; } = {};\n\n  /**\n   * Subscribe to a topic and provide a single handler/observer.\n   * @param topic The name of the topic to subscribe to.\n   * @param observer The observer or callback function to listen when changes are published.\n   *\n   * @returns Subscription from which you can unsubscribe to release memory resources and to prevent memory leak.\n   */\n  subscribe(topic: string, observer: (_: any) => void): Subscription {\n    if (!this.channels[topic]) {\n      this.channels[topic] = new Subject<any>();\n    }\n\n    return this.channels[topic].subscribe(observer);\n  }\n\n  /**\n   * Publish some data to the subscribers of the given topic.\n   * @param topic The name of the topic to emit data to.\n   * @param data data in any format to pass on.\n   */\n  publish(topic: string, data: any): void {\n    const subject = this.channels[topic];\n    if (!subject) {\n      // Or you can create a new subject for future subscribers\n      return;\n    }\n\n    subject.next(data);\n  }\n\n  /**\n   * When you are sure that you are done with the topic and the subscribers no longer needs to listen to a particular topic, you can\n   * destroy the observable of the topic using this method.\n   * @param topic The name of the topic to destroy.\n   */\n  destroy(topic: string): null {\n    const subject = this.channels[topic];\n    if (!subject) {\n      return;\n    }\n\n    subject.complete();\n    delete this.channels[topic];\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-angular-event-bus',\n  template: `\n    <p>\n      angular-event-bus works!\n    </p>\n  `,\n  styles: []\n})\nexport class AngularEventBusComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularEventBusComponent } from './angular-event-bus.component';\n\n\n\n@NgModule({\n  declarations: [AngularEventBusComponent],\n  imports: [\n  ],\n  exports: [AngularEventBusComponent]\n})\nexport class AngularEventBusModule { }\n"],"names":[],"mappings":";;;;;;;;AAAA;IAGA;QAKU,aAAQ,GAAqC,EAAE,CAAC;KA8CzD;;;;;;;;;;;;;;;IArCC,0CAAS;;;;;;;IAAT,UAAU,KAAa,EAAE,QAA0B;QACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACzB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,OAAO,EAAO,CAAC;SAC3C;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;KACjD;;;;;;;;;;;;IAOD,wCAAO;;;;;;IAAP,UAAQ,KAAa,EAAE,IAAS;;YACxB,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACpC,IAAI,CAAC,OAAO,EAAE;;YAEZ,OAAO;SACR;QAED,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpB;;;;;;;;;;;;IAOD,wCAAO;;;;;;IAAP,UAAQ,KAAa;;YACb,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACpC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QAED,OAAO,CAAC,QAAQ,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KAC7B;;gBAlDF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;iCALD;CAGA,IAmDC;;;;;;IA9CC,0CAAwD;;;;;;;;ACR1D;IAaE;KAAiB;;;;IAEjB,2CAAQ;;;IAAR;KACC;;gBAdF,SAAS,SAAC;oBACT,QAAQ,EAAE,uBAAuB;oBACjC,QAAQ,EAAE,yDAIT;iBAEF;;;;IAQD,+BAAC;CAhBD;;;;;;;ACFA;IAKA;KAMsC;;gBANrC,QAAQ,SAAC;oBACR,YAAY,EAAE,CAAC,wBAAwB,CAAC;oBACxC,OAAO,EAAE,EACR;oBACD,OAAO,EAAE,CAAC,wBAAwB,CAAC;iBACpC;;IACoC,4BAAC;CANtC;;;;;;;;;;;;;;;;"}